<?xml version="1.0" encoding="utf-8"?>
<!-- BigBlueButton Client build.xml for use by Hudson builds.   -->
<project name="BigBlueButton Client" basedir="." default="clean-build-all" >
    	<property environment="env" />
    	<property name="BUILD_ENV" value="DEV" />
    	<property name="FLEX_HOME" value="${env.FLEX_HOME}" />
    	<property name="LOCALE_DIR" value="${FLEX_HOME}/frameworks/locale"/>
    	<property name="BASE_DIR" value="${basedir}" />
	<property name="RESOURCES_DIR" value="${BASE_DIR}/resources" />	
	<property name="PROD_RESOURCES_DIR" value="${RESOURCES_DIR}/prod" />	
	<property name="SRC_DIR" value="${BASE_DIR}/src" />
	<property name="MODULES_DIR" value="org/bigbluebutton/modules" />
	<property name="OUTPUT_DIR" value="${BASE_DIR}/bin" />
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

	<!-- Declare module names here -->
	<property name="BBB_MAIN_TEST" value="BigBlueButtonTest" />
	<property name="BBB_MAIN" value="BigBlueButton" />
	<property name="CHAT" value="${MODULES_DIR}/chat/ChatModule" />
	<property name="VIEWERS" value="${MODULES_DIR}/viewers/ViewersModule" />
	<property name="LISTENERS" value="${MODULES_DIR}/listeners/ListenersModule" />
	<property name="PRESENT" value="${MODULES_DIR}/present/PresentModule" />
	<property name="DESKSHARE" value="${MODULES_DIR}/deskshare/DeskShareModule" />
	<property name="DESKSHARE_SA" value="${MODULES_DIR}/deskshare/DeskshareStandalone" />
	<property name="PHONE" value="${MODULES_DIR}/phone/PhoneModule" />
	<property name="VIDEO" value="${MODULES_DIR}/videoconf/VideoconfModule" />
	<property name="WHITEBOARD" value="${MODULES_DIR}/whiteboard/WhiteboardModule" />
	<property name="DYN_INFO" value="${MODULES_DIR}/dynamicinfo/DynamicInfoModule" />
	<property name="BREAKOUT" value="${MODULES_DIR}/breakout/BreakoutModule" />
	<property name="CLASSROOM_AUDIO" value="${MODULES_DIR}/classyaudio/ClassroomAudioModule" />
	<property name="SETTINGS" value="${MODULES_DIR}/settings/SettingsModule" />
	<target name="init-ant-contrib">
		<property name="ant-contrib.jar" location="${BASE_DIR}/build/lib/ant-contrib-0.6.jar"/>
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.jar}"/>
	</target>
	
	<target name="branding" depends="init-ant-contrib">
		<sequential>
			<mxmlc file="${SRC_DIR}/branding/css/${themeFile}" output="${OUTPUT_DIR}/branding/css/${themeFile}.swf" debug="false" mxml.compatibility-version="3.0.0" swf-version="13" optimize="true">
			</mxmlc>
		</sequential>
	</target>
		
	<target name="build-bbb-main-test" description="Compile BigBlueButton Main Test">
                <build-main src="${SRC_DIR}" target="${BBB_MAIN_TEST}" />
	</target>

	<target name="build-bbb-main" description="Compile BigBlueButton Main">
		<build-main src="${SRC_DIR}" target="${BBB_MAIN}" />
		
		<echo message="Copying common assets for BBB Main" />
		<copy todir="${OUTPUT_DIR}/org/bigbluebutton/common/assets/images" >
			<fileset dir="${BASE_DIR}/src/org/bigbluebutton/common/assets/images/" />
		</copy>		
	</target>
	
	<target name="build-breakout" description="Compile Breakout Module" >
		<build-module src="${SRC_DIR}" target="${BREAKOUT}" />
	</target>
	
	<target name="build-chat" description="Compile Chat Module">
		<build-module src="${SRC_DIR}" target="${CHAT}" />
	</target>
	
	<target name="build-viewers" description="Compile Viewers Module">
		<build-module src="${SRC_DIR}" target="${VIEWERS}" />
	</target>
	
	<target name="build-listeners" description="Compile Listeners Module">
		<build-module src="${SRC_DIR}" target="${LISTENERS}" />
	</target>
	
	<target name="build-present" description="Compile Present Module">
		<build-module src="${SRC_DIR}" target="${PRESENT}" />
	</target>

	<target name="build-deskshare-standalone" depends="build-deskshare-no-linker" description="Compile Deskshare Standalone Module">
		<echo message="Compiling deskshare standalone without optimization." />
		<build-module-no-link src="${SRC_DIR}" target="${DESKSHARE_SA}" />
	</target>
	
	<target name="build-deskshare-no-linker" description="Compile Deskshare Module without the linker">
		<echo message="Compiling deskshare without optimization." />
		<build-module-no-link src="${SRC_DIR}" target="${DESKSHARE}" />	
	</target>
	
	<target name="build-deskshare" description="Compile Deskshare Module">
		<build-module src="${SRC_DIR}" target="${DESKSHARE}" />
		<echo message="Copying deskshare applet for Deskshare Module" />
		<copy file="${PROD_RESOURCES_DIR}/bbb-deskshare-applet-0.71.jar" todir="${OUTPUT_DIR}"/>		
	</target>
	
	<target name="build-phone" description="Compile Phone Module">
		<build-module src="${SRC_DIR}" target="${PHONE}" />
		
		<echo message="Copying assets for Phone Module" />
		<copy todir="${OUTPUT_DIR}/org/bigbluebutton/modules/phone/views/assets/images/" >
			<fileset dir="${BASE_DIR}/src/org/bigbluebutton/modules/phone/views/assets/images/" />
		</copy>		
	</target>

	<target name="build-classroom-audio" description="Compile Classroom Audio Module">
		<build-module src="${SRC_DIR}" target="${CLASSROOM_AUDIO}" />
	</target>
	
	<target name="build-settings" description="Compile Settings Module">
		<build-module src="${SRC_DIR}" target="${SETTINGS}" />
	</target>
	
	<target name="build-video" description="Compile Video Module">
		<build-module src="${SRC_DIR}" target="${VIDEO}" />
	</target>
	
	<target name="build-whiteboard" description="Compile Whiteboard Module">
		<build-module src="${SRC_DIR}" target="${WHITEBOARD}" />
	</target>
	
	<target name="build-dyn" description="Compile Dynamic Info Module">
		<build-module src="${SRC_DIR}" target="${DYN_INFO}" />
	</target>
	
	<!-- just a grouping of modules to compile -->
	<target name="build-main-chat-viewers-listeners-present" 
			depends="build-bbb-main, build-bbb-main-test, build-chat, build-viewers, build-listeners, build-present, build-breakout"
			description="Compile main, chat, viewers, listeners, present, breakout modules">
	</target>
	
	<!-- just a grouping of modules to compile -->
	<target name="build-deskshare-phone-video-whiteboard-dyn" 
			depends="build-deskshare, build-phone, build-video, build-whiteboard, build-dyn, build-classroom-audio, build-settings"
			description="Compile deskshare, phone, video, whiteboard, dynamic info modules">
	</target>
	
	<macrodef name="build-main">
			<attribute name="target" description="Module to compile" />
			<attribute name="flex" default="${FLEX_HOME}" description="Location of the Flex install." />
			<attribute name="app" default="."/>
			<attribute name="src" default="${SRC_DIR}" description="Path to the module to compile" />
			<sequential>
				<mxmlc file="@{src}/@{target}.mxml" output="${OUTPUT_DIR}/@{target}.swf" debug="false" mxml.compatibility-version="3.0.0" swf-version="13" optimize="true" link-report="linker-report.xml">
					<target-player>10.3.0</target-player>
					<load-config filename="@{flex}/frameworks/flex-config.xml" />
					<source-path path-element="@{flex}/frameworks" />
					<compiler.library-path dir="@{flex}/frameworks" append="true">
						<include name="libs" />
						<include name="../bundles/{locale}" />
					</compiler.library-path>

					<compiler.library-path dir="@{app}" append="true">
						<include name="libs" />
						<include name="libs/generated" />
					</compiler.library-path>

					<default-size width="500" height="600" />
				</mxmlc>
			</sequential>
		</macrodef>
	
	<macrodef name="build-module-no-link">
		<attribute name="target" description="Module to compile" />
		<attribute name="flex" default="${FLEX_HOME}" description="Location of the Flex install." />
		<attribute name="app" default="."/>
		<attribute name="src" default="${SRC_DIR}" description="Path to the module to compile" />
		<sequential>
			<mxmlc file="@{src}/@{target}.mxml" output="${OUTPUT_DIR}/@{target}.swf" debug="false" mxml.compatibility-version="3.0.0" swf-version="13">
				<target-player>10.3.0</target-player>
				<load-config filename="@{flex}/frameworks/flex-config.xml" />
				<source-path path-element="@{flex}/frameworks" />
				<source-path path-element="${SRC_DIR}" />
				<compiler.library-path dir="@{flex}/frameworks" append="true">
					<include name="libs" />
					<include name="../bundles/{locale}" />
				</compiler.library-path>

				<compiler.library-path dir="@{app}" append="true">
					<include name="libs" />
					<include name="libs/generated" />
				</compiler.library-path>

				<default-size width="500" height="600" />
			</mxmlc>
		</sequential>
	</macrodef>
	
	<macrodef name="build-module">
		<attribute name="target" description="Module to compile" />
		<attribute name="flex" default="${FLEX_HOME}" description="Location of the Flex install." />
		<attribute name="app" default="."/>
		<attribute name="src" default="${SRC_DIR}" description="Path to the module to compile" />
		<sequential>
			<mxmlc file="@{src}/@{target}.mxml" output="${OUTPUT_DIR}/@{target}.swf" debug="false" mxml.compatibility-version="3.0.0" swf-version="13" optimize="true" load-externs="linker-report.xml">
				<target-player>10.3.0</target-player>
				<load-config filename="@{flex}/frameworks/flex-config.xml" />
				<source-path path-element="@{flex}/frameworks" />
				<source-path path-element="${SRC_DIR}" />
				<compiler.library-path dir="@{flex}/frameworks" append="true">
					<include name="libs" />
					<include name="../bundles/{locale}" />
				</compiler.library-path>

				<compiler.library-path dir="@{app}" append="true">
					<include name="libs" />
					<include name="libs/generated" />
				</compiler.library-path>

				<default-size width="500" height="600" />
			</mxmlc>
		</sequential>
	</macrodef>
	
	<target name="compile-deskshare-standalone" depends="build-deskshare-standalone"
			description="Compiling standalone desktop sharing">	
			<echo message="Deskshare standalone built without optimization." />
	</target>
		
	<target name="compile-bbb" depends="build-main-chat-viewers-listeners-present, build-deskshare-phone-video-whiteboard-dyn, copy-resource-files"
			description="Compiling the BBB without copying config.xml">	
	</target>

	<target name="copy-resource-files">
		<copy todir="${OUTPUT_DIR}/assets/" >
			<fileset dir="${PROD_RESOURCES_DIR}/assets/" />
		</copy>	
		<copy todir="${OUTPUT_DIR}/swfobject/" >
			<fileset dir="${BASE_DIR}/src/swfobject/" />
		</copy>	
		<copy todir="${OUTPUT_DIR}/locale" >
			<fileset dir="${BASE_DIR}/locale/" />
		</copy>	
		<copy file="${PROD_RESOURCES_DIR}/BigBlueButtonTest.html" todir="${OUTPUT_DIR}" overwrite="true"/>
		<copy file="${PROD_RESOURCES_DIR}/BigBlueButton.html" todir="${OUTPUT_DIR}" overwrite="true"/>
		<copy file="${PROD_RESOURCES_DIR}/DeskshareStandalone.html" todir="${OUTPUT_DIR}" overwrite="true"/>
		<copy file="${PROD_RESOURCES_DIR}/bbb.gif" todir="${OUTPUT_DIR}" overwrite="true"/>		
		<copy file="${PROD_RESOURCES_DIR}/locales.xml" todir="${OUTPUT_DIR}/conf" overwrite="true"/>		
		<copy file="${PROD_RESOURCES_DIR}/example-info-data.xml" todir="${OUTPUT_DIR}/conf" overwrite="true"/>
		<copy file="${PROD_RESOURCES_DIR}/jquery-1.5.1.min.js" todir="${OUTPUT_DIR}" overwrite="true" />
		<copy file="${PROD_RESOURCES_DIR}/bigbluebutton.js" todir="${OUTPUT_DIR}" overwrite="true"/>
		<copy file="${PROD_RESOURCES_DIR}/deployJava.js" todir="${OUTPUT_DIR}" overwrite="true"/>
		<copy file="${PROD_RESOURCES_DIR}/bbb_blinker.js" todir="${OUTPUT_DIR}" overwrite="true"/>
		<copy file="${PROD_RESOURCES_DIR}/bbb_deskshare.js" todir="${OUTPUT_DIR}" overwrite="true"/>
		<copy file="${PROD_RESOURCES_DIR}/bbb_localization.js" todir="${OUTPUT_DIR}" overwrite="true"/>
		<if>
           	   <equals arg1="${BUILD_ENV}" arg2="DEV"/>
           	      <then>
              			<echo message="Copying config.xml for development environment"/>
				<copy file="${BASE_DIR}/src/conf/config.xml" todir="${OUTPUT_DIR}/conf" /> 
              			<echo message="Copying join-mock.xml for development environment"/>
				<copy file="${BASE_DIR}/src/conf/join-mock.xml" todir="${OUTPUT_DIR}/conf" /> 
           		</then>
           	<else>
              		<echo message="Need to copy config.xml.template for production environment"/>
			<copy file="${RESOURCES_DIR}/config.xml.template" todir="${OUTPUT_DIR}/conf" overwrite="true"/>		
           	</else>
        	</if>
	</target>
	
	<target name="check-config-xml">
    		<available file="/var/www/bigbluebutton/client/conf/config.xml" property="config-xml.present"/>
	</target>

	<target name="copy-config-xml" depends="check-config-xml" if="config-xml.present">
		<echo message="Updating config.xml from /var/www/bigbluebutton/client/conf/config.xml" />
		<copy file="/var/www/bigbluebutton/client/conf/config.xml" todir="${OUTPUT_DIR}/conf" /> 
	</target>

	<target name="generate-html-wrapper">
		<html-wrapper
			title="BigBlueButton"
			file="BigBlueButton.html"
			height="100%"
			width="100%"
			bgcolor="grey"
			application="BBB"
			swf="BigBlueButton"
			version-major="10"
			version-minor="3"
			version-revision="0"
			history="true"
			output="${OUTPUT_DIR}"
		/>
	</target>

	<target name="asdoc">
		<echo message="Generating ASDocs"/>
		<delete dir="${BASE_DIR}/asdoc" />
                <mkdir dir="${BASE_DIR}/asdoc" />
		<!-- asdoc task not natively supported for ant flexTasks.jar for flex3. It is supported for flex 4, so it should be enabled here
		when bbb-client is moved to Flex 4 -->
		<!--<asdoc output="${BASE_DIR}/asdoc" 
			external-library-path="{BASE_DIR}/libs" 
			lenient="true" 
			failonerror="true"
			source-path="${SRC_DIR}"
			doc-sources="${SRC_DIR}"
		/> -->
		<exec executable="${FLEX_HOME}/bin/asdoc" failonerror="true">
			<arg line="-source-path ${SRC_DIR}/ "/>
			<arg line="-doc-sources ${SRC_DIR}/ "/>
			<arg line="-external-library-path '${BASE_DIR}/libs/' "/>
			<arg line="-output '${BASE_DIR}/asdoc' "/>
		</exec>
		<echo message="Done Generating ASDocs" />
	</target>

	<target name="clean">
		<delete dir="${OUTPUT_DIR}" />
		<mkdir dir="${OUTPUT_DIR}"/>
	</target>

	<!-- NOTE: compile-deskshare-standalone MUST come first before compile-bbb as we need the deskshare-standalone
				to be compiled withouth being optimized by using the linker -->
	<target name="clean-build-bbb" depends="clean, init-ant-contrib, generate-html-wrapper, compile-deskshare-standalone, compile-bbb" 
			description="Build BBB client skipping compiling of locales"/>	
	<target name="clean-build-all" depends="clean, init-ant-contrib, generate-html-wrapper, compile-deskshare-standalone, compile-bbb" 
			description="Build BBB client including locales"/>
	<target name="modules" depends="init-ant-contrib, generate-html-wrapper, compile-deskshare-standalone, compile-bbb"
                        description="Build BBB client without locales"/>		
	<target name="cleanandmake" depends="clean-build-all" description="Build BBB client including locales"/>

	<target name="build-custom" depends="init-ant-contrib, build-classroom-audio" description="Build a custom defined module only, to save time as each build takes several minutes" />
</project>
